mysql 单进程，多线程]23:58 2020/1/14        5A
配置文件 etc/my.cnf /etc/mysql/my.cnf /usr/local/mysql/etc/my.cnf /.my.cnf
MySQL由以下几部分组成：
	连接池组件
	管理服务和工具组件
	SQL接口组件
	查询分析器组件
	优化器组件
	缓冲组件
	插件式存储引擎
	物理文件
InnoDB存储引擎支持事务，其设计目标主要是面向在线事务处理的应用。特点是行锁设计，支持外键，支持非多定都
MyISAM存储引擎不支持事务，表锁，支持全文索引，主要面向olap数据库引用，MyISAM不支持事务 
InnoDB架构:
	底层文件，内存池，后台线程
多线程：
	Master Thread
	主要负责将缓冲池中的数据异步刷新到磁盘，保证数据的一致性，包括脏页的刷新，合并插入缓冲，undo页的回收
	IO Thread
	在InnoDB存储引擎中大量使用了AIO来处理写IO请求，IO Thread的工作主要是负责这些io请求的回调
	Purge Thread
	事务提交后，其所使用的undolog不再需要，回收undo页
	Page Cleaner Thread
	脏页刷新
内存：
	缓冲池
	从磁盘读到内存，先操作缓冲，再刷新会磁盘，checkpoint
	数据类型：索引页，数据页，undo页，插入缓冲，自适应哈希索引，InnoDB存储的锁信息，数据字典信息
	LRU List,Free List和Flush List
	LRU midpoint ，新加入的放入后3/8，超过一定时间才放入前面 FreeList 管理空闲页，Flush List需要被刷新的页

	重做日志缓冲
	InnoDB存储引擎首先?将重做日志信息先放入到这个缓冲区，然后按一定频率将其刷新到重做日志文件。
		触发刷新的三个条件：
			Master Thread 每一秒
			每个事务提交时
			当重做日志缓冲剩余空间小于一般
	额外的内存池
		
CheckPoint技术
	write ahead Log，当事务提交时，先写日志，再修改页
	checkPoint可以解决：
		缩短数据库回复时间
		缓冲池不够用时，将脏页刷新到磁盘
		重做日志不可用时，刷新脏页

Master Thread：主循环，后台循环，刷新循环，暂停循环、
	主循环：一秒的操作和10秒的操作
		每秒一次的操作:
			日志缓冲刷新到磁盘，即使这个事务还没有提交
01			合并插入缓冲
			至多刷新100个InnoDB脏页到磁盘
			如果当前没有用户活动，则切换到background loop
		每10秒的操作：
			刷新100个脏页到磁盘
			合并之多5个插入缓冲
			将日志缓冲刷新到磁盘
			删除无用的undo页
			刷新100个或者10个脏页到磁盘
	若当前没有用户活动，或者数据库关闭，就会切换到这个循环：
		删除无用的undo页
		合并20个插入缓冲
		跳回到主循环
		不断刷新100个页直到符合条
InnoDB关键特性
	插入缓冲，两次写，自适应哈希索引，异步io，刷新临界页

	插入缓冲:
		和数据页一样，也是物理页的一个组成部分，主键是行唯一的标识符，通常应用程序中行记录的插入顺序是按照主键递增的顺序进行插入的，因此
		聚集索引（primary key）一般是顺序的，不需要磁盘的随机读取
		辅助索引，非聚集 （key）：存储还是按主键顺序
		而插入缓冲指，对于非聚集索引的插入或更新操作，不是每一次直接插入到索引页，而是先判断插入的非聚集索引页是否在缓冲池中，若在，
		则直接插入，若不在，则先放入插入缓冲，所以其使用条件：
			索引是辅助索引
			索引不是唯一
		实现：B+树，共享表空间
		合并：辅助索引页被读取到缓冲池中
			服务住索引页无可用空间
			Master Thread
	两次写：当数据库发生宕机时，可能InnoDB存储引擎正在写入某个页到表中，而这个页只写了一部分，发生了宕机，部分写失效
		不能使用redo log，redo log是对页的物理操作，偏移量操作，需要有这个页才可以，如果页本身发生了损坏，对其进行重做没有意义
		因此，部分写失效时，先进行的操作应该是先还原页，在进行重做，这就是doublewrite   
	自适应哈希索引：
		根据B+树页构造，自动根据访问频率和模式来自动地为某些热点页建立哈希索引
             	异步io
		提前读取，io连续页
	刷新临界页
		可以完美利用aio
文件
	参数文件
	日志文件
	socket文件
	pid文件
	MySQL表结构文件
	存储引擎文件

	参数文件:
		参数类型：动态参数，静态参数
			动态参数：有globa和session类型
	日志文件：
		错误日志，二进制日志，慢查询日志，查询日志
		
		错误日志：错误日志文件对MySQL的启动，运行，关闭过程进行了记录
		慢查询日志：可以定位存在问题的SQL语句，例如可以在MySQL启动时设一个阈值，将运行时间超过该值的所有SQL记录到慢查询日志中，默认关闭
		查询日志：计略所有对MySQL数据库请求的信息，无论这些请求是否得到了正确的执行
		二进制日志：记录了对MYSQL数据库执行更改的所有操作，但是不包括select和show这类操作
			作用：
				恢复
				复制
				审计
	套接字文件
	pid文件

	InnoDB存储引擎文件：
		重做日志文件，表空间文件
		表空间文件：
			  
表
	索引组织表：存储根据主键，非空的唯一索引
	约束：
		数据完整性
			实体完整性（主键或者唯一索引）
			域完整性（数据满足某一特征：数据类型或者外键）
		对于innodb提供了以下几种约束：primary key，唯一索引，外键，default，not null

		使用：1. create table a（id int,name varchar(20),primary key(id),unique key(name)）;
			2.alter table a add unique key uk_id_card(id_card)

分区表：分区功能并不是在存储引擎层完成的，因此并不是只有InnoDB存储引擎支持分区。MySQL数据库支持的分区类型为水平分区，并不支持垂直分区，而且是局部分区索引，一个分区中既存放了索引，有存放了数据
	分区之后逻辑是一个，物理存储是多个
	当前MySQL数据库支持以下几种类型的分区：
		range分区
		list分区
		hash分区
分区和性能：
	数据库的应用分为两类：
		OLTP(在线事务处理)
		OLAP(在线分析处理)
索引与算法：
	B+树索引，全文索引，哈希索引
	B+树索引并不能找到一个给定键值的具体行，B+树索引能找到的只是被查找数据行所在的页，然后数据库通过把页读入到内存，再在内存中进行查找，每页Page Directory中的槽是按照主键的顺序存放的，对于某一条具体记录的查询是通过对PageDirectory进行二分查找得到的
	聚集索引：叶子节点存放数据
	非聚集索引（辅助索引）：叶子节点并不包含行记录的全部数据，叶子节点除了包含键值意外，每个叶子节点中的索引行还包含了一个书签，该书签用来告诉InnoDB存储引擎哪里可以找到与索引相对应的行数据库，其实就是相应行数据的聚集索引键，再到主索引寻找
索引的创建与删除：
	alter table name add index/key name
	alter table name drop primary key|drop {index|key} index_name

	create index name on tabename
	drop index name on tabename
	联合索引（多列）
	覆盖索引：从辅助索引中就可以得到查询的记录，而不需要查询聚集索引中的记录，使用覆盖索引的一个好处是辅助索引不包含整行记录的所有信息，所以比较小
	
	自适应哈希索引：
		自适应哈希索引采用之前讨论的哈希表的方式实现，不同的是，仅是数据库自身创建并使用的，DBA本身不能对其进行干预，对于范围查找无能为力
全文检索
	b+索引支持 xxx%,不支持 %xxx%(全文检索)
	之前的全文检索在myissam中实现
	现在倒排索引	即存储 单词，单词所在文档id，在该文档中位置

锁
	InnoDB存储引擎锁的实现提供一致性的非锁定读，行级锁支持。
	lock和latch：
		lock对象是事务，latch是线程
		lock行锁，表锁，意向锁，latch
	锁的类型：共享锁和排他锁
	意向锁：表锁
	
	一致性非锁定读：
		通过多版本控制的方式读取当前执行时间数据库中行的数据，如果读取的行正在执行delete或update，这时读取操作不会因此去等待行上锁的示范，相反地，InnoDB存储引擎会读取行的一个快照数据，不需要等锁释放
		快照数据是指改行的之前版本的数据，通过undo端来完成
		非锁定读机制极大地提高了数据库的并发性，在InnodB存储引擎的默认设置下，这是默认的读取方式，即读取不会占用和等待表上的锁， 但是在不同事务隔离级别下，读取的方式不同，并不是每个事务隔离级别下都是采用非锁定的一致性读，
		一个行记录可能有不止一个快照数据，一般称这种技术为行多版本技术，由此带来的并发控制，称之为多版本并发控制
	一致性锁定读：在默认配置下，事务的隔离级别为REPEATABLE READ或者已提交读模式下，InnoDB存储引擎的select 操作使用一致性非锁定读，但是在某些情况下，用户需要显式地对数据库读取操作进行加锁以保证数据逻辑的一致性

	select ...for update
	seect ,,, lock in share mode 这些操作必须在一个事务中，当事务提交了，锁就释放了，因此无比加上 begin，start transcation 或者set autocommit=0

锁问题
	脏读 读到了没有提交的数据，已提交读解决这个问题
	
	不可重复度 一个事务多次读取数据，读取到不同的值，问题，虽然是已提交读，但是可以在读的时候一个新的事务修改数据，所以可重复读+next key lock解决这个问题
		在mysqll官方文档中将不可重复读定义为幻读，使用了Next-key lock 算法，对于索引的扫描，不仅是锁住扫描到的索引，而且还锁住这些索引覆盖的范围，因此在这个范围内的插入都是不允许的
	丢失更新：一个事务的更新被另一个覆盖，问题是一个事务读取到a,像更新到a1，另一个事务读到a，想更新到a2，有可能会覆盖，所以需要可串行化来解决
锁升级其实就是锁的粒度变粗，行锁变表锁，表锁变页锁，节约内存资源

事务：
	ACID
	原子性 要么都做，要么都不做，
	一致性 保证约束
	隔离性 该事务提交前对其他事务不可见
	持久性	事务一旦提交，结果就是永久的，即使发生宕机等故障，也能恢复

事务的实现：
	由锁来实现
	原子性，一致性，持久性通过数据库的redo log和undo log来完成，redo log保证原子性和持久性，undo 保证一致性
	redo恢复提交事务修改的页操作，undo回滚行记录到某个特定版本。redo通常是物理日志，记录的是页的物理修改操作，undo是逻辑日志，根据每行记录进行记录  
redo
	重做日志用来实现事务的持久性，即acid中的d，两部分：内存中的重做日志缓冲，重做日志文件，持久的
undo
	对于每个insert，完成一个delete，对于每个delete，完成一个insert，对于每个update，完成一个相反的update
























